[
    {
        "id": "bae5b032.f31f4",
        "type": "tab",
        "label": "Muon Sensors",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a435736.ad2d19",
        "type": "tab",
        "label": "TTS (TTNv3)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b133f145.390ef",
        "type": "tab",
        "label": "TTN",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8f522d41.6403",
        "type": "tab",
        "label": "TTN Example",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2f03721b.dbbcae",
        "type": "tab",
        "label": "Local MQTT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2647d752.c45478",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c625df66.0ce5a",
        "type": "subflow",
        "name": "Encode Lat/Long",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "84f94d31.dd5cf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": [
                    {
                        "id": "84f94d31.dd5cf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "26e65c47.add384",
        "type": "mqtt-broker",
        "z": "",
        "name": "mqtt.iot.mawsonlakes.org",
        "broker": "172.22.152.116",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5fef919d.82f2c",
        "type": "influxdb",
        "z": "",
        "hostname": "us-west-2-1.aws.cloud2.influxdata.com",
        "port": "443",
        "protocol": "http",
        "database": "iot",
        "name": "influxdata",
        "usetls": true,
        "tls": "b03da90.f904158",
        "influxdbVersion": "1.x"
    },
    {
        "id": "92551ae9.21a528",
        "type": "mqtt-broker",
        "z": "",
        "name": "Meshed (TTN) enfieldlibrary_iot",
        "broker": "thethings.meshed.com.au",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "9b0380e3.cd3dc",
        "type": "mqtt-broker",
        "z": "",
        "name": "Meshed (TTN) enfieldlibrary_iot_trial",
        "broker": "thethings.meshed.com.au",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b03da90.f904158",
        "type": "tls-config",
        "z": "",
        "name": "influxdata",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "us-west-2-1.aws.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "ae76ec5c.43ec8",
        "type": "influxdb",
        "z": "",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "iot",
        "name": "influxDB",
        "usetls": false,
        "tls": "b03da90.f904158",
        "influxdbVersion": "1.x"
    },
    {
        "id": "70a4b237.1f400c",
        "type": "Stackhero-InfluxDB-v2-Server",
        "z": "",
        "name": "influxdata",
        "host": "us-west-2-1.aws.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "8669feaf.0aef6",
        "type": "mqtt-broker",
        "z": "",
        "name": "Local MQTT",
        "broker": "172.22.197.125",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a006f1b7.2b2be",
        "type": "mqtt-broker",
        "z": "",
        "name": "The Things Cloud (AU)",
        "broker": "au1.cloud.thethings.network",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "usetls": true,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "576051df.9ca33",
        "type": "mqtt in",
        "z": "bae5b032.f31f4",
        "name": "",
        "topic": "cosmic-array/event",
        "qos": "2",
        "datatype": "auto",
        "broker": "26e65c47.add384",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "b9e5b79a.ce1e18"
            ]
        ]
    },
    {
        "id": "2b4e1db5.499182",
        "type": "debug",
        "z": "bae5b032.f31f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "b9e5b79a.ce1e18",
        "type": "json",
        "z": "bae5b032.f31f4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "2b4e1db5.499182",
                "7400f07d.6459c",
                "77f5e86c.7c8fa8"
            ]
        ]
    },
    {
        "id": "f7ef7f2e.729f8",
        "type": "influxdb out",
        "z": "bae5b032.f31f4",
        "influxdb": "ae76ec5c.43ec8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "bd838710.c623f8",
        "type": "debug",
        "z": "bae5b032.f31f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "7400f07d.6459c",
        "type": "function",
        "z": "bae5b032.f31f4",
        "name": "Set Event Format",
        "func": "var hostname  = msg.payload.hostname;\nvar channel   = msg.payload.channel;\nvar timestamp = msg.payload.timestamp;\n\nmsg.payload =\n[   \n    {\n        \"timestamp\": timestamp,\n        \"event\": 1\n    },\n    {\n        \"hostname\": hostname,\n        \"channel\":  channel\n    }\n];\n\nmsg.measurement = \"events\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "f7ef7f2e.729f8",
                "bd838710.c623f8"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "6ced6985.220f98",
        "type": "mqtt in",
        "z": "b133f145.390ef",
        "name": "",
        "topic": "enfieldlibrary_iot/devices/+/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "92551ae9.21a528",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "6ca7edc9.b16804",
                "9c216af4.13d158"
            ]
        ]
    },
    {
        "id": "6ca7edc9.b16804",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "9c216af4.13d158",
        "type": "json",
        "z": "b133f145.390ef",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "4e3b3323.af727c",
                "906a4d27.c4f33",
                "39efe034.6a1d1",
                "b3f1abdb.2a3918"
            ]
        ]
    },
    {
        "id": "4e3b3323.af727c",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 500,
        "wires": []
    },
    {
        "id": "4bdedf58.b92e7",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "",
        "func": "var dev_id    = msg.payload.dev_id;\n// var timestamp = msg.payload.timestamp;\n\nmsg.payload =\n[   \n    {\n//        \"timestamp\": timestamp,\n        \"event\": 1\n    },\n    {\n        \"dev_id\": dev_id\n    }\n];\n\nmsg.measurement = \"sensor\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "273e922.33c636e"
            ]
        ]
    },
    {
        "id": "7dda84bb.7e223c",
        "type": "influxdb out",
        "z": "b133f145.390ef",
        "influxdb": "ae76ec5c.43ec8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1320,
        "y": 460,
        "wires": []
    },
    {
        "id": "8d21c98d.d5d318",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "cdf5ffcf.616bb",
        "type": "mqtt in",
        "z": "b133f145.390ef",
        "name": "",
        "topic": "enfieldlibrary_iot_trial/devices/+/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b0380e3.cd3dc",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "1849bdea.d3af62",
                "e20868fe.76d908"
            ]
        ]
    },
    {
        "id": "e20868fe.76d908",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 120,
        "wires": []
    },
    {
        "id": "1849bdea.d3af62",
        "type": "json",
        "z": "b133f145.390ef",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 60,
        "wires": [
            [
                "577dfff.6777b",
                "35293e50.f97c72"
            ]
        ]
    },
    {
        "id": "577dfff.6777b",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 120,
        "wires": []
    },
    {
        "id": "35293e50.f97c72",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "",
        "func": "var dev_id    = msg.payload.dev_id;\n// var timestamp = msg.payload.timestamp;\n\nmsg.payload =\n[   \n    {\n//        \"timestamp\": timestamp,\n        \"event\": 1\n    },\n    {\n        \"dev_id\": dev_id\n    }\n];\n\nmsg.measurement = \"sensor\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 60,
        "wires": [
            [
                "1693d84e.83afa8",
                "64be8e8e.a434"
            ]
        ]
    },
    {
        "id": "1693d84e.83afa8",
        "type": "influxdb out",
        "z": "b133f145.390ef",
        "influxdb": "ae76ec5c.43ec8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "64be8e8e.a434",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "906a4d27.c4f33",
        "type": "switch",
        "z": "b133f145.390ef",
        "name": "Switch on Device",
        "property": "payload.dev_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dragino-lst25283747",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "paeiotdistsensorldds75",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dragino-lht65j77051",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^iot-sensor-",
                "vt": "str",
                "case": false
            },
            {
                "t": "eq",
                "v": "rak7204airquality1",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^rak7204-",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^dingtek-df702-",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 310,
        "y": 360,
        "wires": [
            [
                "f39c9f98.83bbc"
            ],
            [
                "895e7354.f5bb7"
            ],
            [
                "2e90c318.eef77c"
            ],
            [
                "1b90aa98.0d2935",
                "4246e884.d3e1b8"
            ],
            [
                "4b5889dd.c38878"
            ],
            [
                "a0149faa.8fb32"
            ],
            [
                "78b2526.05ee6ac",
                "1726b26.fdd784e"
            ],
            [
                "4bdedf58.b92e7",
                "df827ddb.20d81"
            ]
        ]
    },
    {
        "id": "273e922.33c636e",
        "type": "switch",
        "z": "b133f145.390ef",
        "name": "combine",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 460,
        "wires": [
            [
                "8d21c98d.d5d318",
                "7dda84bb.7e223c"
            ]
        ]
    },
    {
        "id": "9f240380.397ea",
        "type": "mqtt in",
        "z": "8f522d41.6403",
        "name": "MQTT Node - TheThingsNetwork",
        "topic": "#",
        "qos": "2",
        "datatype": "auto",
        "broker": "92551ae9.21a528",
        "x": 270,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c4ed8453.ee0e98",
        "type": "debug",
        "z": "8f522d41.6403",
        "name": "msg.payload.payload_raw - DATA (as is)",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "f2684b53.515b08",
        "type": "function",
        "z": "8f522d41.6403",
        "name": "Decrypt Payload",
        "func": "\nvar payload_raw = msg.payload.payload_raw;\n\nvar payload = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar data     = payload;\nvar batt     = payload.substring(0,4);\nvar temp1    = payload.substring(4,8);\nvar adc      = payload.substring(8,12);\nvar io       = payload.substring(12,14);\nvar temp2    = payload.substring(14,18);\nvar humidity = payload.substring(18,22);\n\nmsg.payload = [{ data: data,\n     batt_raw: batt,\n     batt: parseInt(batt, 16) / 1000,\n     temp1_raw: temp1,\n     temp1: parseInt(temp1, 16) / 10,\n     io: io,\n     adc: adc,\n     temps2_raw: temp2,\n     temp2: parseInt(temp2, 16) / 10,\n     humidity_raw: humidity,\n     humidity: parseInt(humidity, 16) / 10\n    }];\n \nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 240,
        "wires": [
            [
                "c4ed8453.ee0e98"
            ]
        ]
    },
    {
        "id": "3ad0461f.f027ea",
        "type": "debug",
        "z": "8f522d41.6403",
        "name": "message (as is)",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "3a93a70d.51f248",
        "type": "inject",
        "z": "8f522d41.6403",
        "name": "Byte Value example",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "{\"payload_raw\":\"ARA=\"}",
        "payloadType": "str",
        "x": 245,
        "y": 255,
        "wires": [
            [
                "f2684b53.515b08"
            ]
        ]
    },
    {
        "id": "9d6402.bc6d0c",
        "type": "inject",
        "z": "8f522d41.6403",
        "name": "Text example",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{\"payload_raw\":\"SGVsbG8sIHdvcmxkIQ==\"}",
        "payloadType": "str",
        "x": 227,
        "y": 305,
        "wires": [
            [
                "f2684b53.515b08"
            ]
        ]
    },
    {
        "id": "d26937d0.fd6a78",
        "type": "function",
        "z": "8f522d41.6403",
        "name": "Example A - Two \"byte pairs\" (4 bytes in total) for Temp and Humidity",
        "func": "var buf = new Buffer(msg.payload.raw, 'base64'); // put in msg.payload the payload raw data stored initially as Base64\nvar node = msg.devEUI;\n\ntemp = buf[2] * 255 + buf[3];\nhum = buf[0] * 255 + buf[1];\n\n// construct a new object to store the data message\nvar data = {\npayload : [\n [{\n numValue: temp/10.0,\n time: new Date(msg.metadata.server_time).getTime()\n },\n {\n tag1:\"temp\",\n sensor:node\n }],\n [{\n numValue: hum/10.0,\n time: new Date(msg.metadata.server_time).getTime()\n },\n {\n tag1:\"hum\",\n sensor:node\n }]\n]};\nreturn data;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 422,
        "y": 567,
        "wires": [
            []
        ]
    },
    {
        "id": "6d45d77f.f695e8",
        "type": "json",
        "z": "8f522d41.6403",
        "name": "",
        "x": 510,
        "y": 180,
        "wires": [
            [
                "3ad0461f.f027ea",
                "f2684b53.515b08"
            ]
        ]
    },
    {
        "id": "10c64960.c526a7",
        "type": "comment",
        "z": "8f522d41.6403",
        "name": "For MQTT \"user\"/\"password\", use \"Application ID\"/\"default key\" ",
        "info": "\n1) Sign in to TTN and go to your application page where \"app_1\" is your \"Application ID\" e.g.\nhttps://console.thethingsnetwork.org/applications/app_1\n\n2) For MQTT User, use \"Application ID\" \n\n3) For MQTT password, scroll to bottom and use \"default key\" (you need to press the \"eye\" to see the long text)",
        "x": 371,
        "y": 128,
        "wires": []
    },
    {
        "id": "fedf4b06.baf878",
        "type": "function",
        "z": "8f522d41.6403",
        "name": "Example B - Two \"Float value Byte Quads\" (8 bytes in total) for Lat. and Longitude (Float)",
        "func": "var msg2 = { payload: msg.payload.length };\nmsg2.payload = JSON.parse(msg.payload);\nmsg2.payload = new Buffer(msg2.payload.payload, 'base64').toString('hex');\nvar lat = Buffer(msg2.payload, 'hex').readFloatLE(0);\nvar lon = Buffer(msg2.payload, 'hex').readFloatLE(4);\nmsg2.payload= \"[{\\\"lat\\\":\" + lat + \",\\\"lng\\\":\" + lon + \"}]\";//\"{\"lat\":lat,\"lng\":lon};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 469,
        "y": 619,
        "wires": [
            []
        ]
    },
    {
        "id": "f39c9f98.83bbc",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: dragino-lst25283747",
        "func": "// Data from MQTT\nvar dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\nvar airtime     = msg.payload.metadata.airtime;\n\n// Decode payload\nvar payload = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar data        = payload;\nvar battery     = payload.substring(0,4);\nvar temperature = payload.substring(4,8);\nvar adc         = payload.substring(8,12);\nvar io          = payload.substring(12,14);\nvar temp2       = payload.substring(14,18);\nvar humidity    = payload.substring(18,22);\n\nbattery      = parseInt(battery,     16) / 1000;\ntemperature  = parseInt(temperature, 16) / 10;\ntemperature2 = parseInt(temperature, 16) / 10;\nhumidity     = parseInt(humidity,    16) / 10;\n\nmsg.payload =\n[   \n    {\n        \"event\":        1,\n        \"payload_raw\":  payload_raw,\n        \"airtime\":      airtime,\n        \"battery\":      battery,\n        \"temperature\":  temperature,\n        \"temperature2\": temperature2,\n        \"humidity\":     humidity,\n        \"adc\":          adc,\n        \"io\":           io\n    },\n    {\n        \"dev_id\": dev_id\n    }\n];\nmsg.measurement = \"sensor\";\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "276305ef.9a246a",
                "273e922.33c636e"
            ]
        ]
    },
    {
        "id": "276305ef.9a246a",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "895e7354.f5bb7",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: paeiotdistsensorldds75",
        "func": "// Data from MQTT\nvar dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\nvar airtime     = msg.payload.metadata.airtime;\n\n// Decode payload\nvar payload = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar data        = payload;\nvar battery     = payload.substring(0,4);\nvar distance    = payload.substring(4,8);\n\nbattery      = parseInt(battery,  16) / 1000;\ndistance     = parseInt(distance, 16);\n\nmsg.payload =\n[   \n    {\n        \"event\":        1,\n        \"payload_raw\":  payload_raw,\n        \"airtime\":      airtime,\n        \"battery\":      battery,\n        \"distance\":     distance\n    },\n    {\n        \"dev_id\": dev_id\n    }\n];\nmsg.measurement = \"sensor\";\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 360,
        "wires": [
            [
                "23fdcf2.3f8763",
                "273e922.33c636e"
            ]
        ]
    },
    {
        "id": "23fdcf2.3f8763",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 360,
        "wires": []
    },
    {
        "id": "df827ddb.20d81",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1b90aa98.0d2935",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: iot-sensor (influxdb)",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString();\n\nvar humidity  = parseInt(data.substring(0,4),16) / 10;\nvar temp      = parseInt(data.substring(4,8),16) / 10;\nvar humidity2 = parseInt(data.substring(8,12),16) / 10;\nvar temp2     = parseInt(data.substring(12,16),16) / 10;\n\nmsg.payload =\n[   \n    {\n        \"event\":         1,\n        \"humidity\":      humidity,\n        \"temp\":          temp,\n        \"humidity2\":     humidity2,\n        \"temp2\":         temp2,\n    },\n    {\n        \"dev_id\":       dev_id\n    } \n];\nmsg.measurement = \"sensor\";\n\nreturn [ msg ] ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 420,
        "wires": [
            [
                "f41e2ecd.e989b",
                "273e922.33c636e"
            ]
        ]
    },
    {
        "id": "f41e2ecd.e989b",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 420,
        "wires": []
    },
    {
        "id": "664be80b.dc8f38",
        "type": "influxdb out",
        "z": "bae5b032.f31f4",
        "influxdb": "5fef919d.82f2c",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "19a42e4.33905d2",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "bae5b032.f31f4",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 520,
        "y": 320,
        "wires": [
            [
                "6c1ffd6c.d92d34"
            ]
        ]
    },
    {
        "id": "77f5e86c.7c8fa8",
        "type": "function",
        "z": "bae5b032.f31f4",
        "name": "Set Event Format",
        "func": "var hostname  = msg.payload.hostname;\nvar channel   = msg.payload.channel;\nvar timestamp = msg.payload.timestamp;\n\nmsg.payload =\n{\n    bucket:    'iot',\n    data: [\n        {\n        measurement: 'events',\n        tags: {\n            \"hostname\": hostname,\n            \"channel\":  channel.toString()\n            },\n        fields: {\n            \"event\": 1\n            },\n        timestamp: timestamp\n    }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "19a42e4.33905d2",
                "e38277e8.c2bba8"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "6c1ffd6c.d92d34",
        "type": "debug",
        "z": "bae5b032.f31f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "e38277e8.c2bba8",
        "type": "debug",
        "z": "bae5b032.f31f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "247a215f.1a08ee",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 1080,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4246e884.d3e1b8",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: iot-sensor",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString();\n\nvar humidity  = parseInt(data.substring(0,4),16) / 10;\nvar temp      = parseInt(data.substring(4,8),16) / 10;\nvar humidity2 = parseInt(data.substring(8,12),16) / 10;\nvar temp2     = parseInt(data.substring(12,16),16) / 10;\n\nmsg.payload = {   \n  bucket: 'iot',\n  data: [{\n    measurement: 'sensor',\n    tags: {\n      \"dev_id\":  dev_id\n      }, \n    fields: {\n      \"humidity\":      humidity,\n      \"temp\":          temp,\n      \"humidity2\":     humidity2,\n      \"temp2\":         temp2,\n      }\n    }]\n  };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 700,
        "wires": [
            [
                "8986c2e3.0f4c3"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "49fe9775.814168",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 740,
        "wires": []
    },
    {
        "id": "620fc818.8d78c8",
        "type": "mqtt in",
        "z": "2f03721b.dbbcae",
        "name": "",
        "topic": "/enfield_library/devices/+/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "8669feaf.0aef6",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "6922092f.929908"
            ]
        ]
    },
    {
        "id": "498f283d.dd5db8",
        "type": "debug",
        "z": "2f03721b.dbbcae",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "6922092f.929908",
        "type": "json",
        "z": "2f03721b.dbbcae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "240aa8f6.bac658",
                "71777d18.cf4aa4"
            ]
        ]
    },
    {
        "id": "240aa8f6.bac658",
        "type": "function",
        "z": "2f03721b.dbbcae",
        "name": "",
        "func": "var dev_id  = msg.topic;\nvar payload = msg.payload;\nvar measurement = \"sensor\";\n\ndev_id = dev_id.replace(/\\/[^\\/]+\\/[^\\/]+\\/([^\\/]+)\\/.*/, \"$1\")\n\n\nmsg.measurement = measurement;\nmsg.payload =\n[   \n    payload,\n    {\n        \"dev_id\": dev_id\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 80,
        "wires": [
            [
                "3139a3ab.38970c"
            ]
        ]
    },
    {
        "id": "3139a3ab.38970c",
        "type": "influxdb out",
        "z": "2f03721b.dbbcae",
        "influxdb": "ae76ec5c.43ec8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e90c318.eef77c",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decode: dragino-lht65",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar battery      = parseInt(data.substring(0,4),16);\nvar batteryState = battery / 16384;\nbattery = battery - batteryState.toFixed(0)*16384;\n\nvar temp      = parseInt(data.substring(4,8),16) / 100.0;\nvar humidity  = parseInt(data.substring(8,12),16) / 10.0;\nvar temp2     = parseInt(data.substring(14,18),16) / 100.0;\n\nmsg.payload = {   \n  bucket: 'iot',\n  data: [{\n    measurement: 'sensor',\n    tags: {\n      \"dev_id\":  dev_id\n      }, \n    fields: {\n      \"battery-state\": batteryState.toFixed(0),\n      \"battery\":       battery,\n      \"temp\":          temp,\n      \"humidity\":      humidity,\n      \"temp2\":         temp2,\n      }\n    }]\n  };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 600,
        "wires": [
            [
                "8b50aab0.c4b418"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "157d5195.1ef2fe",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 640,
        "wires": []
    },
    {
        "id": "4b5889dd.c38878",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "rak7204airquality1",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar battery   = parseInt(data.substring(4,8),16)   / 100.0;\nvar humidity  = parseInt(data.substring(12,14),16) /   2.0;\nvar barometer = parseInt(data.substring(18,22),16) /  10.0;\nvar temp      = parseInt(data.substring(26,30),16) /  10.0;\nvar iaq       = parseInt(data.substring(34,38),16) / 100.0;\n\nvar air_quality = NaN;\nvar air_rating  = NaN;\nif (iaq < 51) {\n    air_quality = \"good\";\n    air_rating  = 0;\n} else if (iaq >= 51 && iaq < 101) {\n    air_quality = \"average\";\n    air_rating  = 1;\n} else if (iaq >= 101 && iaq < 151) {\n    air_quality = \"little bad\";\n    air_rating  = 2;\n} else if (iaq >= 151 && iaq <201) {\n    air_quality = \"bad\";\n    air_rating  = 3;\n} else if (iaq >= 201 && iaq < 301) {\n    air_quality = \"worse\";\n    air_rating  = 4;\n} else if (iaq >= 301) {\n    air_quality = \"very bad\";\n    air_rating = 5;\n}\n\nmsg.payload = {   \n  bucket: 'iot',\n  data: [{\n    measurement: 'sensor',\n    tags: {\n      \"dev_id\":  dev_id\n      }, \n    fields: {\n      \"battery\":       battery,\n      \"humidity\":      humidity,\n      \"barometer\":     barometer,\n      \"temp\":          temp,\n      \"iaq\":           iaq,\n      \"air_quality\":   air_quality,\n      \"air_rating\":    air_rating\n      }\n    }]\n  };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 800,
        "wires": [
            [
                "51f349f2.08a498"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "51ca48b0.7d1b98",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 840,
        "wires": []
    },
    {
        "id": "71777d18.cf4aa4",
        "type": "function",
        "z": "2f03721b.dbbcae",
        "name": "",
        "func": "var dev_id  = msg.topic;\nvar payload = msg.payload;\n\n// Extract Device ID from MQTT Channel\ndev_id = dev_id.replace(/\\/[^\\/]+\\/[^\\/]+\\/([^\\/]+)\\/.*/, \"$1\")\n\nmsg.payload = {\n    bucket: \"iot\",\n    data: [{\n        measurement: \"sensor\",\n        tags: {\n            \"dev_id\":  dev_id\n        },\n        fields: payload\n    }]\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 180,
        "wires": [
            [
                "498f283d.dd5db8",
                "93fe74ac.40a318"
            ]
        ]
    },
    {
        "id": "93fe74ac.40a318",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "2f03721b.dbbcae",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 740,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a0149faa.8fb32",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: rak7204",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar battery   = parseInt(data.substring(4,8),16)   / 100.0;\nvar humidity  = parseInt(data.substring(12,14),16) /   2.0;\nvar barometer = parseInt(data.substring(18,22),16) /  10.0;\nvar temp      = parseInt(data.substring(26,30),16) /  10.0;\nvar iaq       = parseInt(data.substring(34,38),16) / 100.0;\n\nvar air_quality = NaN;\nvar air_rating  = NaN;\nif (iaq < 51) {\n    air_quality = \"good\";\n    air_rating  = \"0\";\n} else if (iaq >= 51 && iaq < 101) {\n    air_quality = \"average\";\n    air_rating  = \"1\";\n} else if (iaq >= 101 && iaq < 151) {\n    air_quality = \"little bad\";\n    air_rating  = \"2\";\n} else if (iaq >= 151 && iaq <201) {\n    air_quality = \"bad\";\n    air_rating  = \"3\";\n} else if (iaq >= 201 && iaq < 301) {\n    air_quality = \"worse\";\n    air_rating  = \"4\";\n} else if (iaq >= 301) {\n    air_quality = \"very bad\";\n    air_rating = \"5\";\n}\n\nmsg.payload = {   \n  bucket: 'iot',\n  data: [{\n    measurement: 'sensor',\n    tags: {\n      \"dev_id\":  dev_id\n      }, \n    fields: {\n      \"battery\":       battery,\n      \"humidity\":      humidity,\n      \"barometer\":     barometer,\n      \"temp\":          temp,\n      \"iaq\":           iaq,\n      \"air_quality\":   air_quality,\n      \"air_rating\":    air_rating\n      }\n    }]\n  };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 900,
        "wires": [
            [
                "461b1e8d.110a4"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "f5a58d24.f00c5",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 940,
        "wires": []
    },
    {
        "id": "9e6e631f.0a02",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 1080,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "51dc62b7.510b2c",
        "type": "comment",
        "z": "b133f145.390ef",
        "name": "The Things Network v2",
        "info": "",
        "x": 160,
        "y": 20,
        "wires": []
    },
    {
        "id": "a55c8157.c5525",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 1080,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "ecf93354.dae5a",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 1080,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "39efe034.6a1d1",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: Gateways",
        "func": "var payload     = msg.payload;\nvar gateways    = payload.metadata.gateways;\n\nif (isNaN(gateways[0].latitude) ||\n    isNaN(gateways[0].longitude)) {\n    msg = null\n  } else {\n    msg.payload = {  \n        bucket: 'iot',\n        data: [\n            {\n                measurement: 'gateway',\n                tags: {\n                    \"gtw_id\":    payload.metadata.gateways[0].gtw_id,\n                    \"name\":      payload.metadata.gateways[0].gtw_id,\n                    \"longitude\": gateways[0].longitude.toString(),\n                    \"latitude\":  gateways[0].latitude.toString()\n                }, \n                fields: {\n                    \"metric\":    1\n                }\n            }\n        ]\n    }\n  }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "a4de7d30.3a837",
                "30a38122.18808e"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "a4de7d30.3a837",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 720,
        "wires": []
    },
    {
        "id": "30a38122.18808e",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 360,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "84f94d31.dd5cf",
        "type": "function",
        "z": "c625df66.0ce5a",
        "name": "Lookup Lat/Long details",
        "func": "// Add Lat/Long details for a device\nvar payload = msg.payload;\nvar dev_id  = payload.data[0].tags.dev_id;\n\nvar lookup = {\n//    \"iot-sensor-1\":       { \"longitude\": 0.0,        \"latitude\": 0.0 },\n//    \"iot-sensor-2\":       { \"longitude\": 0.0,        \"latitude\": 0.0 },\n//    \"iot-sensor-3\":       { \"longitude\": 0.0,        \"latitude\": 0.0 },\n//    \"iot-sensor-4\":       { \"longitude\": 0.0,        \"latitude\": 0.0 },\n//    \"iot-sensor-5\":       { \"longitude\": 0.0,        \"latitude\": 0.0 },\n    \"rak7204airquality1\":  { \n        \"latitude\": -34.8701763,\n        \"longitude\": 138.6372501,\n        \"location\":  \"Greenacres Library\"\n    },\n    \"rak7204-1\": { \n        \"latitude\": -34.8701763,\n        \"longitude\": 138.6372501,\n        \"location\":  \"Greenacres Library\"\n    },\n    \"rak7204-2\": {\n        \"latitude\": -34.8534073,\n        \"longitude\": 138.6014791,\n        \"location\":  \"Enfield Library\"\n    },\n    \"rak7204-3\": {\n        \"latitude\": -34.8486634,\n        \"longitude\": 138.5047886,\n        \"location\":  \"Port Adelaide Library Popup\"\n    },\n    \"rak7204-4\": {\n        \"latitude\": -34.858551,\n        \"longitude\": 138.5549859,\n        \"location\":  \"Parks Library\"\n    },\n    \"dingtek-df702-1\": {\n        \"latitude\":  -34.854812,\n        \"longitude\": 138.646112,\n        \"location\":  \"Enfield Library Bin\"\n    },\n    \"dragino-lht65j77051\": {\n        \"latitude\": -34.8118914,\n        \"longitude\": 138.6113451,\n        \"location\":  \"Super Chook House (Library Volunteer)\"},\n}\n\nif (typeof dev_id !== 'undefined' &&\n        dev_id in lookup) {\n//node.warn([\"dev_id=\",dev_id]);\n//node.warn([\"lookup=\",lookup]);\n//node.warn([\"lookup[dev_id]=\",lookup[dev_id]]);\n//node.warn([\"lookup[dev_id].longitude=\",lookup[dev_id].longitude]);\n//node.warn([\"lookup[dev_id].latitude=\",lookup[dev_id].latitude]);\n//node.warn([\"payload.data=\",payload.data]);\n\n  var latitude  = lookup[dev_id].latitude;\n  var longitude = lookup[dev_id].longitude;\n\n  payload.data[0].tags[\"latitude\"]  = latitude.toString();\n  payload.data[0].tags[\"longitude\"] = longitude.toString();\n}\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 80,
        "wires": [
            []
        ],
        "info": "This script creates adds Lat/Longs details to a formatted message suitable\nfor sending to InfluxDB (Influxdata) via the 'flux' API."
    },
    {
        "id": "8b50aab0.c4b418",
        "type": "subflow:c625df66.0ce5a",
        "z": "b133f145.390ef",
        "name": "",
        "env": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "a55c8157.c5525",
                "157d5195.1ef2fe"
            ]
        ]
    },
    {
        "id": "51f349f2.08a498",
        "type": "subflow:c625df66.0ce5a",
        "z": "b133f145.390ef",
        "name": "",
        "env": [],
        "x": 890,
        "y": 800,
        "wires": [
            [
                "ecf93354.dae5a",
                "51ca48b0.7d1b98"
            ]
        ]
    },
    {
        "id": "461b1e8d.110a4",
        "type": "subflow:c625df66.0ce5a",
        "z": "b133f145.390ef",
        "name": "",
        "env": [],
        "x": 890,
        "y": 900,
        "wires": [
            [
                "9e6e631f.0a02",
                "f5a58d24.f00c5"
            ]
        ]
    },
    {
        "id": "8986c2e3.0f4c3",
        "type": "subflow:c625df66.0ce5a",
        "z": "b133f145.390ef",
        "name": "",
        "env": [],
        "x": 890,
        "y": 700,
        "wires": [
            [
                "247a215f.1a08ee",
                "49fe9775.814168"
            ]
        ]
    },
    {
        "id": "b3f1abdb.2a3918",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: Gateways",
        "func": "var payload     = msg.payload;\nvar gateways    = payload.metadata.gateways;\n\nmsg.payload = {\n    \"bucket\": 'iot',\n}\n\nmsg.payload.data = []\n\nvar abortflag = true\n\nfor (var gtw in gateways) {\n  if (isNaN(gateways[gtw].latitude) ||\n      isNaN(gateways[gtw].longitude)) {\n  } else {\n    abortflag = false;\n    msg.payload.data.push({  \n        measurement: 'gateway',\n        tags: {\n            \"gtw_id\":    payload.metadata.gateways[gtw].gtw_id,\n            \"name\":      payload.metadata.gateways[gtw].gtw_id,\n            \"longitude\": gateways[gtw].longitude.toString(),\n            \"latitude\":  gateways[gtw].latitude.toString()\n        }, \n        fields: {\n            \"metric\":    1\n        }\n    })\n    }\n  }\n\nif (abortflag == true) {\n    msg = null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 800,
        "wires": [
            [
                "cc6f7ddc.cbf1d"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "cc6f7ddc.cbf1d",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 886,
        "wires": []
    },
    {
        "id": "78b2526.05ee6ac",
        "type": "function",
        "z": "b133f145.390ef",
        "name": "Decrypt: dingtek-df702",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data = new Buffer(payload_raw, 'base64').toString('hex');\n\nvar packet   = parseInt(data.substring(6,8),16);\n\nif (packet == 1 || packet == 2) {\n  var distance = parseInt(data.substring(10,14),16);\n  var capacity = 0;  \n    \n  // 700mm => 0%\n  // 100mm => 100%\n  // 0mm => 110%\n  if (distance > 700){\n    capacity = 0;\n  } else if (distance > 100 && distance <=700){\n    capacity = (700 - distance)/(700 - 100) * 100;\n  } else {\n    capacity = ((100 - distance) / 100 + 100) * 100;\n  }\n  capacity = Math.floor(capacity);\n\n  msg.payload = {   \n    bucket: 'iot',\n    data: [{\n      measurement: 'sensor',\n      tags: {\n        \"dev_id\":  dev_id\n        }, \n      fields: {\n        \"data\":  data,\n        \"packet\":   packet,\n        \"distance\": distance,\n        \"capacity\": capacity\n        }\n      }]\n    };\n} else {\n    msg = null;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "1726b26.fdd784e",
                "b6b31c0.e1c3fe8"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "1726b26.fdd784e",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 960,
        "wires": []
    },
    {
        "id": "fbc24e6e.ac268",
        "type": "debug",
        "z": "b133f145.390ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2f5f8208.ec572e",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "b133f145.390ef",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 1080,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "b6b31c0.e1c3fe8",
        "type": "subflow:c625df66.0ce5a",
        "z": "b133f145.390ef",
        "name": "",
        "env": [],
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "2f5f8208.ec572e",
                "fbc24e6e.ac268"
            ]
        ]
    },
    {
        "id": "caebc111.ea231",
        "type": "mqtt in",
        "z": "a435736.ad2d19",
        "name": "",
        "topic": "v3/enfieldlibrary-trial-v3@ttn/devices/+/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "a006f1b7.2b2be",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "fe0252b3.443ac"
            ]
        ]
    },
    {
        "id": "5e560813.91cfe8",
        "type": "comment",
        "z": "a435736.ad2d19",
        "name": "The Things Stack (TTN v3)",
        "info": "",
        "x": 213,
        "y": 48,
        "wires": []
    },
    {
        "id": "63974eeb.b8006",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "fe0252b3.443ac",
        "type": "json",
        "z": "a435736.ad2d19",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "63974eeb.b8006",
                "a686a1d9.56714"
            ]
        ]
    },
    {
        "id": "cbd86d43.6ccc7",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "a435736.ad2d19",
        "server": "70a4b237.1f400c",
        "name": "influxdata",
        "x": 920,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2000e230.441b5e",
        "type": "function",
        "z": "a435736.ad2d19",
        "name": "Decrypt: iot-sensor",
        "func": "var dev_id      = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data_buffer = new Buffer(payload_raw, 'base64').toString();\n\nvar data = data_buffer.split(/[ ]+/);\n\nif ((dev_id == \"laura\") || (dev_id == \"sally\")){\n    \n  msg.payload = {   \n    bucket: 'iot',\n    data: [{\n      measurement: 'sensor',\n      tags: {\n        \"dev_id\":  dev_id\n        }, \n      fields: {\n        \"temp\":      parseFloat(data[0]),\n        \"humidity\":  parseFloat(data[1])  \n        }\n      }]\n  };\n    \n} else {\n\n  msg.payload = {   \n    bucket: 'iot',\n    data: [{\n      measurement: 'sensor',\n      tags: {\n        \"dev_id\":  dev_id\n      }, \n      fields: {\n        \"temp1\":     parseFloat(data[0]),\n        \"humidity1\": parseFloat(data[1]),\n        \"temp2\":     parseFloat(data[2]),\n        \"humidity2\": parseFloat(data[3]),\n        \"temp3\":     parseFloat(data[4]),\n        \"humidity3\": parseFloat(data[5]),\n        \"temp4\":     parseFloat(data[6]),\n        \"humidity4\": parseFloat(data[7])\n        }\n      }]\n    };\n}\n\n// Additional information\nmsg.meta = {\n    \"device_id\":   dev_id,\n    \"packet_size\": data_buffer.length\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "cbd86d43.6ccc7",
                "d446bcdc.6a4bb"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "b8179782.bc5c28",
        "type": "function",
        "z": "a435736.ad2d19",
        "name": "Pre-Decode LPP",
        "func": "var device_id   = msg.payload.dev_id;\nvar payload_raw = msg.payload.payload_raw;\n\nvar data_buffer_bin = new Buffer(payload_raw, 'base64');\n\n//var data_buffer = new Buffer(payload_raw, 'base64').toString();\n//var data = data_buffer.split(/[ ]+/);\n\nmsg.payload = data_buffer_bin;\nmsg.meta = {\n    \"device_id\": device_id,\n    \"buffer_size\": data_buffer_bin.length\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 420,
        "wires": [
            [
                "ef00157e.a2f758",
                "685d4ee8.8831d"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "ef00157e.a2f758",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 420,
        "wires": []
    },
    {
        "id": "a686a1d9.56714",
        "type": "function",
        "z": "a435736.ad2d19",
        "name": "TTN Decrypt",
        "func": "var dev_id      = msg.payload.end_device_ids.device_id;\nvar payload_raw = msg.payload.uplink_message.frm_payload;\n\n msg.payload = {   \n    \"dev_id\": dev_id,\n    \"payload_raw\": payload_raw\n  };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "77d472ae.aebffc",
                "2bf46f80.4be94"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "77d472ae.aebffc",
        "type": "switch",
        "z": "a435736.ad2d19",
        "name": "",
        "property": "payload.dev_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "sensor-one-2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "2000e230.441b5e"
            ],
            [
                "b8179782.bc5c28",
                "fe337ba8.657bd8"
            ]
        ]
    },
    {
        "id": "d446bcdc.6a4bb",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "2bf46f80.4be94",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "685d4ee8.8831d",
        "type": "cayennelpp-decoder",
        "z": "a435736.ad2d19",
        "name": "",
        "x": 660,
        "y": 480,
        "wires": [
            [
                "36829e3d.691a62",
                "99e24b07.c54958"
            ]
        ]
    },
    {
        "id": "36829e3d.691a62",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 480,
        "wires": []
    },
    {
        "id": "99e24b07.c54958",
        "type": "function",
        "z": "a435736.ad2d19",
        "name": "Post-Decode LPP",
        "func": "var device_id   = msg.meta.device_id;\nvar data        = msg.payload;\n\nmsg.payload = {\n    \"device_id\": device_id,\n    \"data\":      data\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 540,
        "wires": [
            [
                "4d3e0218.56c26c",
                "7e390a2.41061f4"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "4d3e0218.56c26c",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 540,
        "wires": []
    },
    {
        "id": "7e390a2.41061f4",
        "type": "function",
        "z": "a435736.ad2d19",
        "name": "Encode InfluxDB",
        "func": "var device_id = msg.payload.device_id;\nvar fields    = msg.payload.data;\n\nmsg.payload = {   \n  bucket: 'iot',\n  data: [{\n    measurement: 'sensor',\n    tags: {\n      \"dev_id\":  device_id\n    }, \n    fields: fields\n  }]};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 620,
        "wires": [
            [
                "50014c09.1c9304",
                "cbd86d43.6ccc7"
            ]
        ],
        "info": "This script creates a formatted message suitable\nfor sending to 'InjestDB'."
    },
    {
        "id": "50014c09.1c9304",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "fe337ba8.657bd8",
        "type": "debug",
        "z": "a435736.ad2d19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 380,
        "wires": []
    }
]